Description: >
  C964 ML Prediction Layer /
  Contains a full VPC with a public and private subnet for containing an EFS that will be mounted by Lambdas in order to provide the TensorFlow dependencies for predictions. Also contains an EC2 for SSH access for managing the EFS.

Parameters:
  EnvironmentName:
    Description: The name to be prefixed to resource names.
    Type: String
  VpcCidr:
    Description: IP Range for the VPC
    Type: String
    Default: 10.0.0.0/16
  PublicSubnetCidr:
    Description: IP Range for the public subnet, default all traffic in the VPC.
    Type: String
    Default: 10.0.0.0/24
  PrivateSubnetCidr:
    Description: IP Range for the private subnet, default all traffic in the VPC.
    Type: String
    Default: 10.0.0.0/24
  AccessCidr:
    Description: The IP of the machine allowed access into the EC2 within the VPC.
    Type: String
  AmiId:
    Description: The AMI ID of the Linux distribution to use.
    Type: String

Resources:
  ### NETWORK ###
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC
  ### SUBNETS ###
  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: !Ref PublicSubnetCidr
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-PUB-SN
  PrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: !Ref PrivateSubnetCidr
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-PRI-SN
  ### NAT ###
  NatGatewayEIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc
  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayEIP.AllocationId
      SubnetId: !Ref PublicSubnet
  ### ROUTES ###
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-PUB-ROUTES
  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-PRIV-ROUTES
  DefaultPrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway
  PrivateSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet
  ### SEC GROUPS ###
  SSHIngressSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: SSH Ingress into EFS management server
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref AccessCidr
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0
  EFSSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Private SG allowing ingress only from the VPC for EFS access
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 10.0.0.0/24
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0
  ### EC2 Instance for managing the EFS ###
  EFSManager:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.small
      ImageId: !Ref AmiId
      KeyName: c964
      SubnetId: !Ref PublicSubnet
      SecurityGroupIds:
        - Ref: SSHIngressSecGroup
        - Ref: EFSSecGroup
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-EFSManager
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          sudo yum install python3 -y

Outputs:
  VPC:
    Description: Reference to the parent VPC
    Value: !Ref VPC
    Export:
      Name: !Sub ${EnvironmentName}-VPCID
  VPCPublicRouteTable:
    Description: Public Routing Table
    Value: !Ref PublicRouteTable
    Export:
      Name: !Sub ${EnvironmentName}-PUB-RT
  VPCPrivateRouteTable:
    Description: Private Routing Table
    Value: !Ref PrivateRouteTable
    Export:
      Name: !Sub ${EnvironmentName}-PRI-RT
  PublicSubnet:
    Description: The public subnet
    Value: !Ref PublicSubnet
    Export:
      Name: !Sub ${EnvironmentName}-PUB-SN
  PrivateSubnet:
    Description: The private subnet
    Value: !Ref PrivateSubnet
    Export:
      Name: !Sub ${EnvironmentName}-PRI-SN
  EFSManager:
    Description: The EC2 instance for managing EFS
    Value: !Ref EFSManager
    Export:
      Name: !Sub ${EnvironmentName}-PUB-EC2
